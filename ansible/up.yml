---
- hosts: k8s
  become: yes
  gather_facts: no

  vars_files:
    - group_vars/k8s.yml

  pre_tasks:
    - name: Include common role
      import_role:
        name: common

    - name: Create working dir
      file:
        path: /opt/signoz
        state: directory
        mode: "0755"

  tasks:
    - name: Add SigNoz Helm repo
      shell: |
        helm repo add signoz https://charts.signoz.io || true
        helm repo update
      args:
        executable: /bin/bash

    - name: Render override-values.yaml
      template:
        src: templates/override-values.yaml.j2
        dest: /opt/signoz/override-values.yaml
        mode: "0644"

    - name: Create namespace for k8s-infra (if missing)
      shell: |
        kubectl get ns {{ signoz_namespace }} || kubectl create ns {{ signoz_namespace }}
      args:
        executable: /bin/bash

    - name: Install/Upgrade k8s-infra
      shell: |
        helm upgrade --install {{ release_name }} signoz/k8s-infra               -n {{ signoz_namespace }} --create-namespace               -f /opt/signoz/override-values.yaml
      args:
        executable: /bin/bash

    - name: Wait for otel-agent DaemonSet to be ready
      shell: |
        kubectl -n {{ signoz_namespace }} rollout status ds/{{ release_name }}-otel-agent --timeout=180s || true
      args:
        executable: /bin/bash

    - name: Deploy rolldice demo (optional)
      when: deploy_rolldice | bool
      block:
        - name: Write rolldice manifest
          copy:
            dest: /opt/signoz/rolldice.yaml
            mode: "0644"
            content: |
              apiVersion: v1
              kind: Namespace
              metadata:
                name: {{ apps_namespace }}
              ---
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: rolldice
                namespace: {{ apps_namespace }}
              data:
                app.py: |
                  from flask import Flask, jsonify
                  import random, time
                  app = Flask(__name__)
                  @app.get('/rolldice')
                  def roll():
                      return jsonify({"roll": random.randint(1,6), "ts": time.time()})
                  @app.get('/')
                  def root():
                      return "ok", 200
                  if __name__ == '__main__':
                      app.run(host='0.0.0.0', port=8080)
              ---
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: rolldice
                namespace: {{ apps_namespace }}
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: rolldice
                template:
                  metadata:
                    labels:
                      app: rolldice
                  spec:
                    containers:
                      - name: server
                        image: python:3.11-slim
                        ports:
                          - containerPort: 8080
                        env:
                          - name: HOST_IP
                            valueFrom:
                              fieldRef:
                                fieldPath: status.hostIP
                          - name: K8S_POD_IP
                            valueFrom:
                              fieldRef:
                                apiVersion: v1
                                fieldPath: status.podIP
                          - name: K8S_POD_UID
                            valueFrom:
                              fieldRef:
                                fieldPath: metadata.uid
                          - name: OTEL_EXPORTER_OTLP_INSECURE
                            value: "true"
                          - name: OTEL_EXPORTER_OTLP_ENDPOINT
                            value: "$(HOST_IP):4317"
                          - name: OTEL_SERVICE_NAME
                            value: "rolldice"
                          - name: OTEL_RESOURCE_ATTRIBUTES
                            value: "service.name=rolldice,k8s.pod.ip=$(K8S_POD_IP),k8s.pod.uid=$(K8S_POD_UID)"
                        command: ["/bin/sh","-c"]
                        args:
                          - |
                            pip install --no-cache-dir flask opentelemetry-distro opentelemetry-instrumentation-flask opentelemetry-exporter-otlp &&                                 opentelemetry-bootstrap -a install &&                                 OTEL_TRACES_EXPORTER=otlp OTEL_METRICS_EXPORTER=otlp OTEL_LOGS_EXPORTER=otlp                                 opentelemetry-instrument --service_name=rolldice python /app/app.py
                        volumeMounts:
                          - name: app
                            mountPath: /app
                    volumes:
                      - name: app
                        configMap:
                          name: rolldice
              ---
              apiVersion: v1
              kind: Service
              metadata:
                name: rolldice
                namespace: {{ apps_namespace }}
              spec:
                selector:
                  app: rolldice
                ports:
                  - port: 8080
                    targetPort: 8080

        - name: Apply rolldice manifest
          shell: kubectl apply -f /opt/signoz/rolldice.yaml
          args:
            executable: /bin/bash

